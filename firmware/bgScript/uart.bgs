# BGScript Code to run UART on BLE112

# used for internal data buffer
dim buf1(16)
dim count
dim buffer_pointer

# used for BD Addr
dim bdaddr(6)
dim readeraddr(6)

# check if BLE is connected
# data only recieved if ble is connected
dim connected

# System start/boot listener
event system_boot(major,minor,patch,build,ll_version,protocol,hw)
	
	# read local devices public bluetooth address
	call system_address_get()(bdaddr(0:6))

	# set connection flag to 0
	connected = 0

	#create addr buffer (hex)
	readeraddr(0:1) = bdaddr(5:1)
	readeraddr(1:1) = bdaddr(4:1)
	readeraddr(2:1) = bdaddr(3:1)
	readeraddr(3:1) = bdaddr(2:1)
	readeraddr(4:1) = bdaddr(1:1)
	readeraddr(5:1) = bdaddr(0:1)

	# write the bd address characteristic
	call attributes_write(xgatt_bdaddr, 0, 6, readeraddr(0:6))


	# set to advertise
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
	#set buffer pointer to 0
	buffer_pointer = 0
	#set recieved counter to 0
	count = 0
	#set to bondable mode
	call sm_set_bondable_mode(1)
end

event attributes_value(connection, reason, handle, offset, value_len, value_data)
  # Characteristic TX has been written
  if handle=34 then 
    call system_endpoint_tx(system_endpoint_uart1, value_len, value_data(0:value_len))
  end if
  
  # Characteristic clear RX buffer has been written
  if handle=31
    buffer_pointer = 0
	count = 0
	call attributes_write(xgatt_rx_buf_count, 0, 1, 0)	
  end if
end



event system_endpoint_rx(endpoint, data_len, data_data) 
  
  # module must be connectd to change the buffer according to the
  # UART data received.
  if connected=1
    if endpoint=system_endpoint_uart1
    	
	  if (buffer_pointer+data_len)>16
		  #clip length to maximum buffer size, discard data that does not fit
		  memcpy(buf1(buffer_pointer),data_data(0),16-buffer_pointer)
		  count = count + (16-buffer_pointer)
	  else
		  memcpy(buf1(buffer_pointer),data_data(0),data_len)
		  buffer_pointer = buffer_pointer + data_len
		  count = count + data_len
	  end if
	
      call attributes_write(xgatt_rx_buf_count, 0, 1, count)
  
      if count=$10
        call attributes_write(xgatt_rx, 0, 16, buf1(0:16))
	    buffer_pointer = 0
	    count = 0
	    call attributes_write(xgatt_rx_buf_count, 0, 1, 0)
      end if
    end if
  end if
end


event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
	
 	connected = 1
end

# Disconnection event
event connection_disconnected(connection, reason)
	# broadcast yourself and make bondable
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
	
	connected = 0
end